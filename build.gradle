buildscript {
    ext{
        kotlinVersion = "1.8.22"
    }
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.22"
        classpath 'com.android.tools.build:gradle:8.1.0'
        classpath "me.champeau.jmh:jmh-gradle-plugin:0.7.1"
    }
}

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'me.champeau.jmh' version '0.7.1'
    id 'jacoco'
    id 'checkstyle'
}

apply plugin: 'com.android.lint'

repositories {
    google()
    mavenCentral()
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    main.resources.srcDirs = ['src/main/resources']
    test.java.srcDirs = ['src/test/java']
    test.resources.srcDirs = ['src/test/resources']
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

compileJava {
    options.compilerArgs << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

lint {
    htmlReport = true
    abortOnError = true
    warningsAsErrors = false
    checkDependencies = true
}

tasks.register('installLocal') {
    def lines = []
    new File('pom.xml').withReader { reader ->
        reader.eachLine {
            lines.add(it)
        }
    }

    def changedVersion = false
    new File('pom-local.xml').withWriter { writer ->
        lines.forEach {
            if (it.trim().startsWith('<version>') && !changedVersion) {
                writer.write('<version>local</version>')
                changedVersion = true
            } else {
                writer.write(it)
            }
        }
    }

    exec {
        executable 'mvn'
        args '-f', 'pom-local.xml', '-Dgpg.skip', 'install'
    }
}

jar {
    archiveBaseName = 'javarosa'
    // Be sure to update version in pom.xml to match
    // snapshot release = x.x.x-SNAPSHOT
    // production release = x.x.x
    archiveVersion = '4.3.0-SNAPSHOT'
    archiveFileName = "${archiveBaseName}-${archiveVersion}.jar"

    manifest {
        attributes 'Manifest-Version': '$jar.archiveVersion'
    }
}

// TODO: does not build UML diagrams
javadoc {
    failOnError = false
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

// Required to use fileExtensions property in checkstyle file
checkstyle {
    toolVersion = '7.6.1'
}

jmhJar.doFirst {
    new File("build/resources/test").mkdirs()
}

jmh {
    excludes = ["(BenchmarkTemplate)"]
    threads = 1
    fork = 1
    warmup = '2s'
    warmupIterations = 10
    warmupBatchSize = 1
    warmupForks = 1
    iterations = 20
    timeOnIteration = '2s'
    timeUnit = 's'
    benchmarkMode = ['avgt', 'ss']
    includeTests = true
    resultFormat = 'CSV'
    forceGC = true

    duplicateClassesStrategy = DuplicatesStrategy.WARN
}

dependencies {
    // Be sure to update dependencies in pom.xml to match
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
    implementation 'joda-time:joda-time:2.10.13'
    implementation 'org.slf4j:slf4j-api:1.7.33'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'

    // Upgrade to version higher than 1.4 when Collect minSDK >= 26
    implementation 'org.apache.commons:commons-csv:1.4'
    // Upgrade to version higher than 2.5 when Collect minSDK >= 26
    implementation 'commons-io:commons-io:2.5'


    compileOnly 'net.sf.kxml:kxml2:2.3.0'

    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'net.sf.kxml:kxml2:2.3.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}
